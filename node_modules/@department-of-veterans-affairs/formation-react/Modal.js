"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESCAPE_KEY = 27;
var TAB_KEY = 9;

var Modal = /*#__PURE__*/function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleDocumentKeyDown", function (event) {
      if (event.keyCode === ESCAPE_KEY) {
        _this.handleClose(event);
      }

      if (event.keyCode === TAB_KEY) {
        if (event.shiftKey) {
          _this.setState({
            isTabbingBackwards: true
          });
        } else {
          _this.setState({
            isTabbingBackwards: false
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function (e) {
      e.preventDefault();

      _this.props.onClose();
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentFocus", function (event) {
      if (_this.props.visible && !_this.element.contains(event.target)) {
        event.stopPropagation();

        if (_this.state.isTabbingBackwards) {
          _this.applyFocusToLastModalElement();
        } else {
          _this.applyFocusToFirstModalElement();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentClicked", function (event) {
      if (_this.props.visible && !_this.element.contains(event.target)) {
        _this.props.onClose();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "renderAlertActions", function () {
      var _this$props = _this.props,
          primaryButton = _this$props.primaryButton,
          secondaryButton = _this$props.secondaryButton;
      if (!primaryButton && !secondaryButton) return null;
      return _react["default"].createElement("div", {
        className: "alert-actions"
      }, primaryButton && _react["default"].createElement("button", {
        className: "usa-button",
        onClick: primaryButton.action
      }, primaryButton.text), secondaryButton && _react["default"].createElement("button", {
        className: "usa-button-secondary",
        onClick: secondaryButton.action
      }, secondaryButton.text));
    });

    _this.state = {
      lastFocus: null,
      isTabbingBackwards: false
    };
    return _this;
  }

  _createClass(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.visible) this.setupModal();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.visible && this.props.visible) {
        this.setupModal();
      } else if (prevProps.visible && !this.props.visible) {
        this.teardownModal();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.visible) {
        this.teardownModal();
      }
    }
  }, {
    key: "setupModal",
    value: function setupModal() {
      this.setState({
        lastFocus: document.activeElement
      });
      this.setInitialModalFocus(); // NOTE: With this PR (https://github.com/department-of-veterans-affairs/vets-website/pull/11712)
      // we rely on the existence of `body.modal-open` to determine if a modal is
      // currently open and adjust programmatic scrolling if there is.

      document.body.classList.add('modal-open');
      document.addEventListener('keydown', this.handleDocumentKeyDown, false);
      document.addEventListener('focus', this.handleDocumentFocus, true);

      if (this.props.clickToClose) {
        document.addEventListener('click', this.handleDocumentClicked, true);
      }
    }
  }, {
    key: "teardownModal",
    value: function teardownModal() {
      var _this2 = this;

      if (this.state.lastFocus) {
        // Ensure last focus is set before completing modal teardown
        setTimeout(function () {
          _this2.state.lastFocus.focus();
        }, 0);
      }

      document.body.classList.remove('modal-open');
      document.removeEventListener('keydown', this.handleDocumentKeyDown, false);
      document.removeEventListener('focus', this.handleDocumentFocus, true);

      if (this.props.clickToClose) {
        document.removeEventListener('click', this.handleDocumentClicked, true);
      }
    }
  }, {
    key: "setInitialModalFocus",
    value: function setInitialModalFocus() {
      if (this.props.initialFocusSelector) {
        var focusableElement = this.element.querySelector(this.props.initialFocusSelector);

        if (focusableElement) {
          focusableElement.focus();
        }
      } else {
        this.applyFocusToFirstModalElement();
      }
    }
  }, {
    key: "applyFocusToFirstModalElement",
    value: function applyFocusToFirstModalElement() {
      var focusableElement = this.element.querySelector(this.props.focusSelector);

      if (focusableElement) {
        focusableElement.focus();
      }
    }
  }, {
    key: "applyFocusToLastModalElement",
    value: function applyFocusToLastModalElement() {
      var _this3 = this;

      var allFocusableElements = this.element.querySelectorAll(this.props.focusSelector);
      var focusableModalElements = Array.from(allFocusableElements).filter(function (el) {
        return _this3.element.contains(el);
      });

      if (focusableModalElements.length) {
        focusableModalElements[focusableModalElements.length - 1].focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames,
          _this4 = this;

      if (!this.props.visible) return null;
      var _this$props2 = this.props,
          id = _this$props2.id,
          status = _this$props2.status,
          title = _this$props2.title;
      var titleId = title && "".concat(id || 'va-modal', "-title");
      var content = this.props.contents || this.props.children;
      var modalClass = (0, _classnames["default"])('va-modal', this.props.cssClass);
      var wrapperClass = (0, _classnames["default"])('va-modal-inner', (_classNames = {
        'usa-alert': status
      }, _defineProperty(_classNames, "usa-alert-".concat(status), status), _defineProperty(_classNames, 'va-modal-alert', status), _classNames));
      var bodyClass = status ? 'usa-alert-body' : 'va-modal-body';
      var titleClass = status ? 'usa-alert-heading' : 'va-modal-title';
      var contentClass = (0, _classnames["default"])({
        'usa-alert-text': status
      });

      var closeButton = !this.props.hideCloseButton && _react["default"].createElement("button", {
        className: "va-modal-close",
        type: "button",
        "aria-label": "Close this modal",
        onClick: this.handleClose
      }, _react["default"].createElement("i", {
        className: "fas fa-times-circle",
        "aria-hidden": "true"
      }));

      return _react["default"].createElement("div", {
        className: modalClass,
        id: id,
        role: "alertdialog",
        "aria-labelledby": titleId
      }, _react["default"].createElement("div", {
        className: wrapperClass,
        ref: function ref(el) {
          _this4.element = el;
        }
      }, closeButton, _react["default"].createElement("div", {
        className: bodyClass
      }, _react["default"].createElement("div", {
        role: "document"
      }, title && _react["default"].createElement("h3", {
        id: titleId,
        className: titleClass
      }, title), content && _react["default"].createElement("div", {
        className: contentClass
      }, content)), this.renderAlertActions())));
    }
  }]);

  return Modal;
}(_react["default"].Component);

Modal.defaultProps = {
  clickToClose: false,
  focusSelector: 'button, input, select, a'
};
var _default = Modal;
exports["default"] = _default;