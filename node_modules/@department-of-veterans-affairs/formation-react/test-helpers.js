"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mountToDiv = mountToDiv;
exports.axeCheck = axeCheck;

var _enzyme = require("enzyme");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function mountToDiv(component, id) {
  var div = document.getElementById(id);

  if (!div) {
    div = document.createElement('div');
    div.setAttribute('id', id);
    document.body.appendChild(div);
  }

  div.innerHTML = '';
  return (0, _enzyme.mount)(component, {
    attachTo: div
  });
}

function axeCheck(component) {
  var ignoredRules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var div = document.getElementById('axeContainer');

  if (!div) {
    div = document.createElement('div');
    div.setAttribute('id', 'axeContainer');
    document.body.appendChild(div);
  }

  div.innerHTML = '';
  var mountedComponent = (0, _enzyme.mount)(component, {
    attachTo: div
  });
  return new Promise(function (resolve, reject) {
    axe.run(document.body, function (err, result) {
      if (err) {
        // eslint-disable-next-line no-console
        console.error(err);
        reject(err);
      }

      var validViolations = result.violations.filter(function (violation) {
        return !ignoredRules.includes(violation.id);
      });

      if (validViolations.length) {
        reject(new Error(validViolations.map(function (violation) {
          var nodeInfo = violation.nodes.reduce(function (str, node) {
            var html = node.html,
                target = node.target;
            return [str, html].concat(_toConsumableArray(target)).join('\n');
          }, '');
          return "[".concat(violation.impact, "] ").concat(violation.help, "\nId: ").concat(violation.id, "\nSee ").concat(violation.helpUrl, "\n").concat(nodeInfo);
        }).join('\n')));
      }

      mountedComponent.unmount();
      resolve();
    });
  });
}