"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _fields = require("./fields");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * A form select with a label that can display error messages.
 */
var ErrorableSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorableSelect, _React$Component);

  function ErrorableSelect() {
    var _this;

    _classCallCheck(this, ErrorableSelect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorableSelect).call(this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ErrorableSelect, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.selectId = (0, _uniqueId2["default"])('errorable-select-');
    }
  }, {
    key: "handleChange",
    value: function handleChange(domEvent) {
      this.props.onValueChange((0, _fields.makeField)(domEvent.target.value, true));
    }
  }, {
    key: "render",
    value: function render() {
      var selectedValue = this.props.value.value; // Calculate error state.

      var errorSpan = '';
      var errorSpanId = undefined;

      if (this.props.errorMessage) {
        errorSpanId = "".concat(this.selectId, "-error-message");
        errorSpan = _react["default"].createElement("span", {
          className: "usa-input-error-message",
          id: "".concat(errorSpanId),
          role: "alert"
        }, this.props.errorMessage);
      } // Calculate required.


      var requiredSpan = undefined;

      if (this.props.required) {
        requiredSpan = _react["default"].createElement("span", {
          className: "form-required-span"
        }, "(*Required)");
      } // Calculate options for select


      var reactKey = 0; // TODO(awong): Remove this hack to handle options prop and use invariants instead.

      var options = (0, _isArray2["default"])(this.props.options) ? this.props.options : [];
      var optionElements = options.map(function (obj) {
        var label;
        var value;

        if ((0, _isString2["default"])(obj)) {
          label = obj;
          value = obj;
        } else {
          label = obj.label;
          value = obj.value;
        }

        return _react["default"].createElement("option", {
          key: ++reactKey,
          value: value
        }, label);
      });
      return _react["default"].createElement("div", {
        className: this.props.errorMessage ? 'usa-input-error' : undefined
      }, _react["default"].createElement("label", {
        className: this.props.errorMessage ? 'usa-input-error-label' : this.props.labelClass,
        htmlFor: this.selectId
      }, this.props.label, requiredSpan), errorSpan, _react["default"].createElement("select", {
        className: this.props.additionalClass,
        "aria-describedby": errorSpanId,
        id: this.selectId,
        name: this.props.name,
        value: selectedValue,
        onKeyDown: this.props.onKeyDown,
        onChange: this.handleChange
      }, this.props.includeBlankOption && _react["default"].createElement("option", {
        value: ""
      }, this.props.emptyDescription), optionElements));
    }
  }]);

  return ErrorableSelect;
}(_react["default"].Component);

ErrorableSelect.defaultProps = {
  includeBlankOption: true
};
var _default = ErrorableSelect;
exports["default"] = _default;