"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _ErrorableSelect = _interopRequireDefault(require("./ErrorableSelect"));

var _ErrorableNumberInput = _interopRequireDefault(require("./ErrorableNumberInput"));

var _validations = require("./validations");

var _optionsForSelect = require("./options-for-select.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * A date input field that accepts values for month and year
 */
var ErrorableDate = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorableDate, _React$Component);

  function ErrorableDate() {
    var _this;

    _classCallCheck(this, ErrorableDate);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorableDate).call(this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ErrorableDate, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.id = (0, _uniqueId2["default"])('date-input-');
    }
  }, {
    key: "handleChange",
    value: function handleChange(path, update) {
      var date = _objectSpread({}, this.props.date, _defineProperty({}, path, update));

      if (!date.month.value) {
        date.day.value = '';
      }

      this.props.onValueChange(date);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props$date = this.props.date,
          day = _this$props$date.day,
          month = _this$props$date.month,
          year = _this$props$date.year;
      var daysForSelectedMonth = [];

      if (month.value) {
        daysForSelectedMonth = _optionsForSelect.days[month.value];
      } // we want to do validations in a specific order, so we show the message
      // that makes the most sense to the user


      var isValid = true;
      var errorMessage;

      if ((0, _validations.isDirtyDate)(this.props.date)) {
        // make sure the user enters a full date first, if required
        if (this.props.required && !(0, _validations.isNotBlankDateField)(this.props.date)) {
          isValid = false;
          errorMessage = this.props.requiredMessage; // make sure the user has entered a minimally valid date
        } else if (!(0, _validations.isValidPartialDate)(day.value, month.value, year.value)) {
          isValid = false;
          errorMessage = this.props.invalidMessage;
        } else {
          var validationResult = (0, _validations.validateCustomFormComponent)(this.props.validation);
          isValid = validationResult.valid;
          errorMessage = validationResult.message;
        }
      }

      var errorSpanId;
      var errorSpan = '';

      if (!isValid) {
        errorSpanId = "".concat(this.inputId, "-error-message");
        errorSpan = _react["default"].createElement("span", {
          className: "usa-input-error-message",
          role: "alert",
          id: errorSpanId
        }, _react["default"].createElement("span", {
          className: "sr-only"
        }, "Error"), " ", errorMessage);
      }

      return _react["default"].createElement("div", {
        className: !isValid ? 'input-error-date' : undefined
      }, _react["default"].createElement("label", null, this.props.label ? this.props.label : 'Date of birth', this.props.required && _react["default"].createElement("span", {
        className: "form-required-span"
      }, "(*Required)")), errorSpan, _react["default"].createElement("div", {
        className: isValid ? undefined : 'usa-input-error form-error-date'
      }, _react["default"].createElement("div", {
        className: "usa-date-of-birth"
      }, _react["default"].createElement("div", {
        className: "form-datefield-month"
      }, _react["default"].createElement(_ErrorableSelect["default"], {
        errorMessage: isValid ? undefined : '',
        label: "Month",
        name: "".concat(this.props.name, "Month"),
        options: _optionsForSelect.months,
        value: month,
        onValueChange: function onValueChange(update) {
          _this2.handleChange('month', update);
        }
      })), _react["default"].createElement("div", {
        className: "form-datefield-day"
      }, _react["default"].createElement(_ErrorableSelect["default"], {
        errorMessage: isValid ? undefined : '',
        label: "Day",
        name: "".concat(this.props.name, "Day"),
        options: daysForSelectedMonth,
        value: day,
        onValueChange: function onValueChange(update) {
          _this2.handleChange('day', update);
        }
      })), _react["default"].createElement("div", {
        className: "usa-datefield usa-form-group usa-form-group-year"
      }, _react["default"].createElement(_ErrorableNumberInput["default"], {
        errorMessage: isValid ? undefined : '',
        label: "Year",
        name: "".concat(this.props.name, "Year"),
        max: (0, _moment["default"])().add(100, 'year').year(),
        min: "1900",
        pattern: "[0-9]{4}",
        field: year,
        onValueChange: function onValueChange(update) {
          _this2.handleChange('year', update);
        }
      })))));
    }
  }]);

  return ErrorableDate;
}(_react["default"].Component);

ErrorableDate.defaultProps = {
  requiredMessage: 'Please provide a response',
  invalidMessage: 'Please provide a valid date'
};
var _default = ErrorableDate;
exports["default"] = _default;