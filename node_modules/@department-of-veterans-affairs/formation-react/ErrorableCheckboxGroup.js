"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ExpandingGroup = _interopRequireDefault(require("./ExpandingGroup"));

var _fields = require("./fields");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A checkbox button group with a label.
 *
 * Validation has the following props.
 * `additionalFieldsetClass` - String for any additional fieldset classes.
 * `additionalLegendClass` - String for any additional legend classes.
 * `label` - String for the group field label.
 * `name` - String for the name attribute.
 * `tabIndex` - Number for keyboard tab order.
 * `options` - Array of options to populate group.
 * `required` - is this field required.
 * `values` - object. Values of the checkbox field.
 * `onValueChange` - a function with this prototype: (newValue)
 */
var ErrorableCheckboxGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorableCheckboxGroup, _React$Component);

  function ErrorableCheckboxGroup() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ErrorableCheckboxGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ErrorableCheckboxGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "getMatchingSubSection", function (checked, optionValues) {
      if (checked && _this.props.children) {
        var children = (0, _isArray2["default"])(_this.props.children) ? _this.props.children : [_this.props.children];
        var subsections = children.filter(function (child) {
          return optionValues.contains(child.props.showIfValueChosen);
        });
        return subsections.length > 0 ? subsections[0] : null;
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (domEvent) {
      _this.props.onValueChange((0, _fields.makeField)(domEvent.target.value, true), domEvent.target.checked);
    });

    return _this;
  }

  _createClass(ErrorableCheckboxGroup, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.inputId = this.props.id || (0, _uniqueId2["default"])('errorable-checkbox-buttons-');
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // TODO: extract error logic into a utility function
      // Calculate error state.
      var errorSpan = '';
      var errorSpanId = undefined;

      if (this.props.errorMessage) {
        errorSpanId = "".concat(this.inputId, "-error-message");
        errorSpan = _react["default"].createElement("span", {
          className: "usa-input-error-message",
          role: "alert",
          id: errorSpanId
        }, _react["default"].createElement("span", {
          className: "sr-only"
        }, "Error:"), " ", this.props.errorMessage);
      } // Calculate required.


      var requiredSpan = undefined;

      if (this.props.required) {
        requiredSpan = _react["default"].createElement("span", {
          className: "form-required-span"
        }, "(*Required)");
      }

      var options = (0, _isArray2["default"])(this.props.options) ? this.props.options : [];
      var storedValues = this.props.values;
      var optionElements = options.map(function (obj, index) {
        var optionLabel;
        var optionValue;
        var optionAdditional;

        if ((0, _isString2["default"])(obj)) {
          optionLabel = obj;
          optionValue = obj;
        } else {
          optionLabel = obj.label;
          optionValue = obj.value;

          if (obj.additional) {
            optionAdditional = _react["default"].createElement("div", null, obj.additional);
          }
        }

        var checked = storedValues[optionValue];

        var matchingSubSection = _this2.getMatchingSubSection(checked, optionValue);

        var checkboxButton = _react["default"].createElement("div", {
          key: optionAdditional ? undefined : index,
          className: "form-checkbox-buttons"
        }, _react["default"].createElement("input", {
          checked: checked,
          id: "".concat(_this2.inputId, "-").concat(index),
          name: _this2.props.name,
          type: "checkbox",
          onMouseDown: _this2.props.onMouseDown,
          onKeyDown: _this2.props.onKeyDown,
          value: optionValue,
          onChange: _this2.handleChange
        }), _react["default"].createElement("label", {
          name: "".concat(_this2.props.name, "-").concat(index, "-label"),
          htmlFor: "".concat(_this2.inputId, "-").concat(index)
        }, optionLabel), matchingSubSection, obj.content);

        var output = checkboxButton; // Return an expanding group for buttons with additional content

        if (optionAdditional) {
          output = _react["default"].createElement(_ExpandingGroup["default"], {
            additionalClass: "form-expanding-group-active-checkbox",
            open: checked,
            key: index
          }, checkboxButton, _react["default"].createElement("div", null, optionAdditional));
        }

        return output;
      });
      var fieldsetClass = (0, _classnames["default"])('fieldset-input', _defineProperty({
        'usa-input-error': this.props.errorMessage
      }, this.props.additionalFieldsetClass, this.props.additionalFieldsetClass));
      var legendClass = (0, _classnames["default"])('legend-label', _defineProperty({
        'usa-input-error-label': this.props.errorMessage
      }, this.props.additionalLegendClass, this.props.additionalLegendClass));
      return _react["default"].createElement("fieldset", {
        className: fieldsetClass
      }, _react["default"].createElement("legend", {
        className: legendClass
      }, this.props.label, requiredSpan), errorSpan, optionElements);
    }
  }]);

  return ErrorableCheckboxGroup;
}(_react["default"].Component);

var _default = ErrorableCheckboxGroup;
exports["default"] = _default;