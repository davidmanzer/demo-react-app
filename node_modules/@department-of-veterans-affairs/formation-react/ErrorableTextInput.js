"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _fields = require("./fields");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * A form input with a label that can display error messages.
 *
 * Props:
 * `errorMessage` - Error string to display in the component.
 *                  When defined, indicates input has a validation error.
 * `label` - String for the input field label.
 * `name` - String for the input name attribute.
 * `tabIndex` - Number for keyboard tab order.
 * `autocomplete` - String for the input autocomplete attribute.
 * `placeholder` - placeholder string for input field.
 * `required` - boolean. Render marker indicating field is required.
 * `field` - string. Value of the input field.
 * `additionalClass` - Extra attribute for use by CSS selector, specifically
 *                     by tests
 * `onValueChange` - a function with this prototype: (newValue)
 */
var ErrorableTextInput = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorableTextInput, _React$Component);

  function ErrorableTextInput() {
    var _this;

    _classCallCheck(this, ErrorableTextInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorableTextInput).call(this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ErrorableTextInput, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.inputId = (0, _uniqueId2["default"])('errorable-text-input-');
    }
  }, {
    key: "handleChange",
    value: function handleChange(domEvent) {
      this.props.onValueChange((0, _fields.makeField)(domEvent.target.value, this.props.field.dirty));
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      this.props.onValueChange((0, _fields.makeField)(this.props.field.value, true));
    }
  }, {
    key: "render",
    value: function render() {
      // Calculate error state.
      var errorSpan = '';
      var maxCharacters;
      var errorSpanId = undefined;
      var inputErrorClass = undefined;
      var labelErrorClass = undefined;

      if (this.props.errorMessage) {
        errorSpanId = "".concat(this.inputId, "-error-message");
        errorSpan = _react["default"].createElement("span", {
          className: "usa-input-error-message",
          role: "alert",
          id: errorSpanId
        }, _react["default"].createElement("span", {
          className: "sr-only"
        }, "Error"), " ", this.props.errorMessage);
        inputErrorClass = 'usa-input-error';
        labelErrorClass = 'usa-input-error-label';
      } // Calculate max characters and display '(Max. XX characters)' when max is hit.


      if (this.props.field.value) {
        if (this.props.charMax === this.props.field.value.length) {
          maxCharacters = _react["default"].createElement("small", null, "(Max. ", this.props.charMax, " characters)");
        }
      } // Calculate required.


      var requiredSpan = undefined;

      if (this.props.required) {
        requiredSpan = _react["default"].createElement("span", {
          className: "form-required-span"
        }, "(*Required)");
      } // preventDefault on the div stops the form from submitting after a user
      // presses enter while the input is focused


      return _react["default"].createElement("div", {
        className: inputErrorClass
      }, _react["default"].createElement("label", {
        className: labelErrorClass,
        htmlFor: this.inputId
      }, this.props.label, requiredSpan), errorSpan, _react["default"].createElement("input", {
        className: this.props.additionalClass,
        "aria-describedby": errorSpanId,
        id: this.inputId,
        placeholder: this.props.placeholder,
        name: this.props.name,
        tabIndex: this.props.tabIndex,
        autoComplete: this.props.autocomplete,
        type: this.props.type,
        maxLength: this.props.charMax,
        value: this.props.field.value,
        onChange: this.handleChange,
        onBlur: this.handleBlur
      }), maxCharacters);
    }
  }]);

  return ErrorableTextInput;
}(_react["default"].Component);

ErrorableTextInput.defaultProps = {
  type: 'text'
};
var _default = ErrorableTextInput;
exports["default"] = _default;