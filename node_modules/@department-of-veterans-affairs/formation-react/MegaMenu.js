"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _react = _interopRequireDefault(require("react"));

var _MenuSection = _interopRequireDefault(require("./MenuSection"));

var _SubMenu = _interopRequireDefault(require("./SubMenu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MegaMenu = /*#__PURE__*/function (_React$Component) {
  _inherits(MegaMenu, _React$Component);

  function MegaMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MegaMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MegaMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleDocumentClick", function (event) {
      if (_this.props.currentDropdown && !_this.menuRef.contains(event.target)) {
        _this.props.toggleDropDown('');
      }
    });

    _defineProperty(_assertThisInitialized(_this), "resetDefaultState", function () {
      if (_this.mobileMediaQuery.matches) {
        _this.props.toggleDisplayHidden(true);
      } else {
        _this.props.toggleDisplayHidden(false);
      }

      _this.props.updateCurrentSection('');

      _this.props.toggleDropDown('');
    });

    return _this;
  }

  _createClass(MegaMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mobileMediaQuery = window.matchMedia('(max-width: 767px)');
      this.smallDesktopMediaQuery = window.matchMedia('(min-width: 768px and max-width: 1007px)');

      if (this.mobileMediaQuery.matches) {
        this.props.toggleDisplayHidden(true);
      }

      this.mobileMediaQuery.addListener(this.resetDefaultState);
      document.body.addEventListener('click', this.handleDocumentClick, false);
    }
    /**
     * Remove event listener
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mobileMediaQuery.removeListener(this.resetDefaultState);
      document.body.removeEventListener('click', this.handleDocumentClick, false);
    }
  }, {
    key: "getSubmenu",
    value: function getSubmenu(item, currentSection) {
      var _this2 = this;

      if (this.mobileMediaQuery.matches) {
        var menuSections = [item.menuSections.mainColumn, item.menuSections.columnOne, item.menuSections.columnTwo].reduce(function (acc, column) {
          acc.push({
            title: column.title,
            links: {
              columnOne: {
                title: '',
                links: column.links
              },
              columnTwo: {
                title: '',
                links: []
              }
            }
          });
          return acc;
        }, []);
        return menuSections.map(function (section, i) {
          return _react["default"].createElement(_MenuSection["default"], {
            key: "".concat(section, "-").concat(i),
            title: section.title,
            defaultSection: _this2.defaultSection(item.menuSections),
            currentSection: currentSection,
            updateCurrentSection: function updateCurrentSection() {
              return _this2.updateCurrentSection(section.title);
            },
            links: section.links,
            linkClicked: _this2.props.linkClicked,
            mobileMediaQuery: _this2.mobileMediaQuery,
            smallDesktopMediaQuery: _this2.smallDesktopMediaQuery,
            columnThreeLinkClicked: _this2.props.columnThreeLinkClicked
          });
        });
      }

      return _react["default"].createElement(_SubMenu["default"], {
        data: item.menuSections,
        navTitle: item.title,
        handleBackToMenu: function handleBackToMenu() {
          return _this2.toggleDropDown('');
        },
        show: this.props.currentDropdown !== '',
        linkClicked: this.props.linkClicked,
        mobileMediaQuery: this.mobileMediaQuery,
        smallDesktopMediaQuery: this.smallDesktopMediaQuery,
        columnThreeLinkClicked: this.props.columnThreeLinkClicked
      });
    }
  }, {
    key: "defaultSection",
    value: function defaultSection(sections) {
      if (this.mobileMediaQuery.matches) {
        return '';
      }

      return sections[0].title;
    }
  }, {
    key: "toggleDropDown",
    value: function toggleDropDown(title) {
      if (this.props.currentDropdown === title) {
        this.props.toggleDropDown('');
      } else {
        this.props.toggleDropDown(title);
      }
    }
  }, {
    key: "updateCurrentSection",
    value: function updateCurrentSection(title) {
      var sectionTitle = title;

      if (this.mobileMediaQuery.matches) {
        sectionTitle = this.props.currentSection === title ? '' : title;
      }

      this.props.updateCurrentSection(sectionTitle);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          currentDropdown = _this$props.currentDropdown,
          currentSection = _this$props.currentSection,
          data = _this$props.data,
          display = _this$props.display,
          linkClicked = _this$props.linkClicked,
          columnThreeLinkClicked = _this$props.columnThreeLinkClicked;
      return _react["default"].createElement("div", _extends({
        className: "login-container"
      }, display), _react["default"].createElement("div", {
        className: "row va-flex",
        ref: function ref(el) {
          _this3.menuRef = el;
        }
      }, _react["default"].createElement("div", {
        id: "vetnav",
        role: "navigation"
      }, _react["default"].createElement("ul", {
        id: "vetnav-menu"
      }, _react["default"].createElement("li", null, _react["default"].createElement("a", {
        href: "/",
        className: "vetnav-level1"
      }, "Home")), data.map(function (item, i) {
        return _react["default"].createElement("li", {
          key: "".concat((0, _kebabCase2["default"])(item.title), "-").concat(i),
          className: "".concat(item.className || '', " ").concat(item.currentPage ? 'current-page' : '')
        }, item.menuSections ? _react["default"].createElement("button", {
          "aria-expanded": currentDropdown === item.title,
          "aria-controls": "vetnav-".concat((0, _kebabCase2["default"])(item.title)),
          className: "vetnav-level1",
          onClick: function onClick() {
            return _this3.toggleDropDown(item.title);
          }
        }, item.title) : _react["default"].createElement("a", {
          href: item.href,
          onClick: linkClicked.bind(null, item),
          className: "vetnav-level1",
          target: item.target || null
        }, item.title), _react["default"].createElement("div", {
          id: "vetnav-".concat((0, _kebabCase2["default"])(item.title)),
          className: "vetnav-panel",
          hidden: currentDropdown !== item.title
        }, item.title === currentDropdown && item.menuSections && _react["default"].createElement("ul", {
          "aria-label": item.title
        }, Array.isArray(item.menuSections) ? item.menuSections.map(function (section, j) {
          return _react["default"].createElement(_MenuSection["default"], {
            key: "".concat(section, "-").concat(j),
            title: section.title,
            defaultSection: _this3.defaultSection(item.menuSections),
            currentSection: currentSection,
            updateCurrentSection: function updateCurrentSection() {
              return _this3.updateCurrentSection(section.title);
            },
            href: section.href,
            links: section.links,
            linkClicked: linkClicked,
            mobileMediaQuery: _this3.mobileMediaQuery,
            smallDesktopMediaQuery: _this3.smallDesktopMediaQuery,
            columnThreeLinkClicked: columnThreeLinkClicked
          });
        }) : _this3.getSubmenu(item, currentSection))));
      })))));
    }
  }]);

  return MegaMenu;
}(_react["default"].Component);

exports["default"] = MegaMenu;
MegaMenu.defaultProps = {
  currentDropdown: '',
  currentSection: '',
  display: {},
  linkClicked: function linkClicked() {},
  columnThreeLinkClicked: function columnThreeLinkClicked() {}
};