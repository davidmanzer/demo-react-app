"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DropDownPanel = /*#__PURE__*/function (_React$Component) {
  _inherits(DropDownPanel, _React$Component);

  function DropDownPanel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropDownPanel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropDownPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleDocumentClick", function (event) {
      // If this dropdown is open, and it's not an element within this dropdown being clicked,
      // then the user clicked elsewhere and we should invoke the click handler to toggle this
      // dropdown to closed.
      if (_this.props.isOpen && !_this.dropdownDiv.contains(event.target)) {
        _this.toggleDropDown();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleDropDown", function () {
      _this.props.clickHandler();
    });

    return _this;
  }

  _createClass(DropDownPanel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.body.addEventListener('click', this.handleDocumentClick, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.removeEventListener('click', this.handleDocumentClick, false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var buttonClasses = (0, _classnames["default"])(this.props.cssClass, {
        'va-btn-withicon': this.props.icon
      }, 'va-dropdown-trigger');
      return _react["default"].createElement("div", {
        className: "va-dropdown",
        ref: function ref(div) {
          _this2.dropdownDiv = div;
        }
      }, _react["default"].createElement("button", {
        className: buttonClasses,
        "aria-controls": this.props.id,
        "aria-expanded": this.props.isOpen,
        disabled: this.props.disabled,
        onClick: this.toggleDropDown
      }, _react["default"].createElement("span", null, this.props.icon, this.props.buttonText)), _react["default"].createElement("div", {
        className: "va-dropdown-panel",
        id: this.props.id,
        hidden: !this.props.isOpen
      }, this.props.children));
    }
  }]);

  return DropDownPanel;
}(_react["default"].Component);

exports["default"] = DropDownPanel;
DropDownPanel.defaultProps = {
  disabled: false
};