"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBlank = isBlank;
exports.isBlankDateField = isBlankDateField;
exports.isBlankMonthYear = isBlankMonthYear;
exports.isDirtyDate = isDirtyDate;
exports.isFullDate = isFullDate;
exports.isNotBlank = isNotBlank;
exports.isNotBlankDateField = isNotBlankDateField;
exports.isValidAnyDate = isValidAnyDate;
exports.isValidCurrentOrPastYear = isValidCurrentOrPastYear;
exports.isValidCurrentOrPastDate = isValidCurrentOrPastDate;
exports.isValidCurrentOrFutureMonthYear = isValidCurrentOrFutureMonthYear;
exports.isValidFutureDate = isValidFutureDate;
exports.isValidDate = isValidDate;
exports.isValidDateField = isValidDateField;
exports.isValidDateOver17 = isValidDateOver17;
exports.isValidDateRange = isValidDateRange;
exports.isValidEmail = isValidEmail;
exports.isValidFullNameField = isValidFullNameField;
exports.isValidField = isValidField;
exports.isValidMonths = isValidMonths;
exports.isValidName = isValidName;
exports.isValidMonetaryValue = isValidMonetaryValue;
exports.isValidPhone = isValidPhone;
exports.isValidPartialDate = isValidPartialDate;
exports.isValidPartialDateField = isValidPartialDateField;
exports.isValidPartialMonthYear = isValidPartialMonthYear;
exports.isValidPartialMonthYearInPast = isValidPartialMonthYearInPast;
exports.isValidPartialMonthYearRange = isValidPartialMonthYearRange;
exports.isValidRequiredField = isValidRequiredField;
exports.isValidSSN = isValidSSN;
exports.isValidValue = isValidValue;
exports.isValidYear = isValidYear;
exports.isValidYearOrBlank = isValidYearOrBlank;
exports.validateCustomFormComponent = validateCustomFormComponent;
exports.validateIfDirty = validateIfDirty;
exports.validateIfDirtyDate = validateIfDirtyDate;
exports.isValidRoutingNumber = isValidRoutingNumber;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function dateToMoment(dateField) {
  return (0, _moment["default"])({
    year: dateField.year.value,
    month: dateField.month.value ? parseInt(dateField.month.value, 10) - 1 : '',
    day: dateField.day ? dateField.day.value : null
  });
}
/**
 * General Validations *
 */


function validateIfDirty(field, validator) {
  if (field.dirty) {
    return validator(field.value);
  }

  return true;
}

function validateCustomFormComponent(customValidation) {
  // Allow devs to pass in an array of validations with messages and display the first failed one
  if (Array.isArray(customValidation)) {
    if (customValidation.some(function (validator) {
      return !validator.valid;
    })) {
      return customValidation.filter(function (validator) {
        return !validator.valid;
      })[0];
    } // Also allow objects for custom validation

  } else if (_typeof(customValidation) === 'object' && !customValidation.valid) {
    return customValidation;
  }

  return {
    valid: true,
    message: null
  };
}

function isBlank(value) {
  return value === '';
}

function isNotBlank(value) {
  return value !== '';
}

function isValidValue(validator, value) {
  return isBlank(value) || validator(value);
}

function isValidField(validator, field) {
  return isBlank(field.value) || validator(field.value);
}

function isValidRequiredField(validator, field) {
  return isNotBlank(field.value) && validator(field.value);
}
/**
 * Date Validations *
 */


function isValidYear(value) {
  return Number(value) >= 1900 && Number(value) <= (0, _moment["default"])().add(100, 'year').year();
}

function isValidYearOrBlank(value) {
  return isValidYear(value) || value === '';
}

function isValidCurrentOrPastYear(value) {
  return Number(value) >= 1900 && Number(value) < (0, _moment["default"])().year() + 1;
}

function isValidMonths(value) {
  return Number(value) >= 0;
}

function isBlankDateField(field) {
  return isBlank(field.day.value) && isBlank(field.month.value) && isBlank(field.year.value);
}

function isFullDate(date) {
  return /\d{4}-\d{1,2}-\d{1,2}/.test(date);
}

function isValidDate(day, month, year) {
  // Use the date class to see if the date parses back sanely as a
  // validation check. Not sure is a great idea...
  var adjustedMonth = Number(month) - 1; // JS Date object 0-indexes months. WTF.

  var date = new Date(year, adjustedMonth, day);
  var today = new Date();

  if (today < date) {
    return false;
  }

  if (!isValidYear(year)) {
    return false;
  }

  return date.getDate() === Number(day) && date.getMonth() === adjustedMonth && date.getFullYear() === Number(year);
}

function isNotBlankDateField(field) {
  return isNotBlank(field.day.value) && isNotBlank(field.month.value) && isNotBlank(field.year.value);
}

function isDirtyDate(date) {
  return date.day.dirty && date.year.dirty && date.month.dirty;
}

function validateIfDirtyDate(dayField, monthField, yearField, validator) {
  if (isDirtyDate({
    day: dayField,
    month: monthField,
    year: yearField
  })) {
    return validator(dayField.value, monthField.value, yearField.value);
  }

  return true;
}

function isValidAnyDate(day, month, year) {
  if (!isValidYear(year)) {
    return false;
  }

  return (0, _moment["default"])({
    day: day,
    month: month ? parseInt(month, 10) - 1 : month,
    year: year
  }).isValid();
}

function isValidPartialDate(day, month, year) {
  if (year && !isValidYear(year)) {
    return false;
  }

  return true;
}

function isValidDateField(field) {
  return isValidDate(field.day.value, field.month.value, field.year.value);
}

function isValidPartialDateField(field) {
  return isValidPartialDate(field.day.value, field.month.value, field.year.value);
}

function isValidDateRange(fromDate, toDate) {
  if (isBlankDateField(toDate) || isBlankDateField(fromDate)) {
    return true;
  }

  var momentStart = dateToMoment(fromDate);
  var momentEnd = dateToMoment(toDate);
  return momentStart.isBefore(momentEnd);
}

function isValidPartialMonthYear(month, year) {
  if (_typeof(month) === 'object') {
    throw new Error('Pass a month and a year to function');
  }

  if (month && (Number(month) > 12 || Number(month) < 1)) {
    return false;
  }

  return isValidPartialDate(null, null, year);
}

function isValidPartialMonthYearRange(fromDate, toDate) {
  if (!fromDate.year.value || !toDate.year.value) {
    return true;
  }

  var momentStart = dateToMoment(fromDate);
  var momentEnd = dateToMoment(toDate);
  return momentStart.isSameOrBefore(momentEnd);
}

function isValidPartialMonthYearInPast(month, year) {
  if (_typeof(month) === 'object') {
    throw new Error('Pass a month and a year to function');
  }

  var momentDate = (0, _moment["default"])({
    year: year,
    month: month ? parseInt(month, 10) - 1 : null
  });
  return !year || isValidPartialMonthYear(month, year) && momentDate.isValid() && momentDate.isSameOrBefore((0, _moment["default"])().startOf('month'));
}

function isValidCurrentOrPastDate(day, month, year) {
  var momentDate = (0, _moment["default"])({
    day: day,
    month: parseInt(month, 10) - 1,
    year: year
  });
  return momentDate.isSameOrBefore((0, _moment["default"])().endOf('day'), 'day');
}

function isValidFutureDate(day, month, year) {
  var momentDate = (0, _moment["default"])({
    day: day,
    month: parseInt(month, 10) - 1,
    year: year
  });
  return momentDate.isAfter((0, _moment["default"])().endOf('day'), 'day');
}

function isValidCurrentOrFutureMonthYear(month, year) {
  var momentDate = (0, _moment["default"])({
    month: parseInt(month, 10) - 1,
    year: year
  });
  return momentDate.isSameOrAfter((0, _moment["default"])(), 'month');
}

function isBlankMonthYear(field) {
  return isBlank(field.month.value) && isBlank(field.year.value);
}

function isValidDateOver17(day, month, year) {
  if (!isValidYear(year)) {
    return false;
  }

  var momentDate = (0, _moment["default"])({
    day: day,
    month: parseInt(month, 10) - 1,
    year: year
  });
  return momentDate.isBefore((0, _moment["default"])().endOf('day').subtract(17, 'years'));
}
/**
 * Field Validations *
 */


function isValidName(value) {
  return /^[a-zA-Z][a-zA-Z '-]*$/.test(value);
}

function isValidFullNameField(field) {
  return isValidName(field.first.value) && (isBlank(field.middle.value) || isValidName(field.middle.value)) && isValidName(field.last.value);
} // Conditions for valid SSN from the original 1010ez pdf form:
// '123456789' is not a valid SSN
// A value where the first 3 digits are 0 is not a valid SSN
// A value where the 4th and 5th digits are 0 is not a valid SSN
// A value where the last 4 digits are 0 is not a valid SSN
// A value with 3 digits, an optional -, 2 digits, an optional -, and 4 digits is a valid SSN
// 9 of the same digits (e.g., '111111111') is not a valid SSN


function isValidSSN(value) {
  if (value === '123456789' || value === '123-45-6789') {
    return false;
  } else if (/^0{3}-?\d{2}-?\d{4}$/.test(value)) {
    return false;
  } else if (/^\d{3}-?0{2}-?\d{4}$/.test(value)) {
    return false;
  } else if (/^\d{3}-?\d{2}-?0{4}$/.test(value)) {
    return false;
  }

  var noBadSameDigitNumber = (0, _range2["default"])(0, 10).every(function (i) {
    var sameDigitRegex = new RegExp("".concat(i, "{3}-?").concat(i, "{2}-?").concat(i, "{4}"));
    return !sameDigitRegex.test(value);
  });

  if (!noBadSameDigitNumber) {
    return false;
  }

  return /^\d{9}$/.test(value) || /^\d{3}-\d{2}-\d{4}$/.test(value);
}

function isValidMonetaryValue(value) {
  if (value !== null) {
    return /^\d+\.?\d*$/.test(value);
  }

  return true;
} // TODO: look into validation libraries (npm "validator")


function isValidPhone(value) {
  // Strip spaces, dashes, and parens
  var stripped = value.replace(/[^\d]/g, ''); // Count number of digits

  return /^\d{10}$/.test(stripped);
}

function isValidEmail(value) {
  // Comes from StackOverflow: http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
  // eslint-disable-next-line no-useless-escape
  return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
} // Pulled from https://en.wikipedia.org/wiki/Routing_transit_number#Check_digit


function isValidRoutingNumber(value) {
  if (/^\d{9}$/.test(value)) {
    var digits = value.split('').map(function (val) {
      return parseInt(val, 10);
    });
    var weighted = 3 * (digits[0] + digits[3] + digits[6]) + 7 * (digits[1] + digits[4] + digits[7]) + (digits[2] + digits[5] + digits[8]);
    return weighted % 10 === 0;
  }

  return false;
}