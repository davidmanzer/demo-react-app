"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ALERT_TYPE = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Enum used to set the AlertBox's `status` prop
var ALERT_TYPE = Object.freeze({
  INFO: 'info',
  // Blue border, black circled 'i'
  ERROR: 'error',
  // Red border, red circled exclamation
  SUCCESS: 'success',
  // Green border, green checkmark
  WARNING: 'warning',
  // Yellow border, black triangle exclamation
  CONTINUE: 'continue' // Green border, green lock

});
exports.ALERT_TYPE = ALERT_TYPE;

var AlertBox = /*#__PURE__*/function (_Component) {
  _inherits(AlertBox, _Component);

  function AlertBox() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AlertBox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlertBox)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "scrollToAlert", function () {
      if (!_this._ref || !_this._ref.scrollIntoView) {
        return;
      } // Without using the setTimeout, React has not added the element
      // to the DOM when it calls scrollIntoView()


      if (_this.props.isVisible && _this.props.scrollOnShow) {
        clearTimeout(_this.scrollToAlertTimeout);
        _this.scrollToAlertTimeout = setTimeout(function () {
          _this._ref.scrollIntoView({
            block: _this.props.scrollPosition,
            behavior: 'smooth'
          });
        }, 0);
      }
    });

    return _this;
  }

  _createClass(AlertBox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.scrollToAlert();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.scrollToAlertTimeout);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var visibilityChanged = this.props.isVisible !== nextProps.isVisible;
      var contentChanged = this.props.content !== nextProps.content;
      var statusChanged = this.props.status !== nextProps.status;
      return visibilityChanged || contentChanged || statusChanged;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scrollToAlert();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (!this.props.isVisible) return _react["default"].createElement("div", {
        "aria-live": "polite"
      });
      var alertClass = (0, _classnames["default"])('usa-alert', "usa-alert-".concat(this.props.status), {
        'background-color-only': this.props.backgroundOnly
      }, this.props.className);

      var closeButton = this.props.onCloseAlert && _react["default"].createElement("button", {
        className: "va-alert-close",
        "aria-label": this.props.closeBtnAriaLabel,
        onClick: this.props.onCloseAlert
      }, _react["default"].createElement("i", {
        className: "fas fa-times-circle",
        "aria-label": "Close icon"
      }));

      var alertHeading = this.props.headline;
      var alertText = this.props.content || this.props.children;
      var H = "h".concat(this.props.level);
      return _react["default"].createElement("div", {
        className: alertClass,
        ref: function ref(_ref) {
          _this2._ref = _ref;
        }
      }, _react["default"].createElement("div", {
        className: "usa-alert-body"
      }, alertHeading && _react["default"].createElement(H, {
        className: "usa-alert-heading"
      }, alertHeading), alertText && _react["default"].createElement("div", {
        className: "usa-alert-text"
      }, alertText)), closeButton);
    }
  }]);

  return AlertBox;
}(_react.Component);
/* eslint-disable consistent-return */


/* eslint-enable consistent-return */
AlertBox.defaultProps = {
  scrollPosition: 'start',
  isVisible: true,
  backgroundOnly: false,
  closeBtnAriaLabel: 'Close notification',
  level: 3
};
var _default = AlertBox;
exports["default"] = _default;