"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CONTACTS", {
  enumerable: true,
  get: function get() {
    return _contacts.CONTACTS;
  }
});
exports["default"] = exports.PATTERNS = void 0;

var _react = _interopRequireDefault(require("react"));

var _contacts = require("./contacts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Patterns used in formatting visible text
var PATTERNS = {
  '3_DIGIT': '###',
  DEFAULT: '###-###-####',
  OUTSIDE_US: '+1-###-###-####'
}; // Custom aria labels (only used internally)

exports.PATTERNS = PATTERNS;
var LABELS = {
  711: 'TTY: 7 1 1.',
  911: '1. 9 1 1.'
};
/**
 * Parse the raw phone number string. And strip out leading "1" and any
 * non-digits
 * @param {string} number - raw phone number input
 * @return {string} - string containing only numbers
 */

var parseNumber = function parseNumber(number) {
  return number.replace(/^1/, '') // strip leading "1" from telephone number
  .replace(/[^\d]/g, '');
};
/**
 * Insert the provided number into the pattern
 * @param {string} phoneNumber - parsed number string (no non-digits included)
 * @param {string} pattern - provided pattern (using "#") for link text
 * @return {string} - formatted phone number for link text
 */
// Create link text from pattern


var formatTelText = function formatTelText(phoneNumber, pattern) {
  var patternLength = pattern.match(/#/g).length; // If the pattern does not match the phone number, return the raw phone number.

  if (phoneNumber.length !== patternLength) {
    return phoneNumber;
  }

  var i = 0;
  return pattern.replace(/#/g, function () {
    return phoneNumber[i++] || '';
  });
};
/**
 * Add a space between each number part
 * @param {string} number - number part, e.g. area code, prefix, line number
 * @return {string} - formatted number part for use in aria-label
 */


var formatTelLabelBlock = function formatTelLabelBlock(number) {
  return number.split('').join(' ');
};
/**
 * Format telephone number for label
 * @param {string} number - Expected a phone number with or without dashes that
 * matches the number of "#" within the default or set pattern
 * @return {string} - Combined phone number parts within the label separated by
 * periods, e.g. "800-555-1212" becomes "8 0 0. 5 5 5. 1 2 1 2"
 */


var formatTelLabel = function formatTelLabel(number) {
  return number.split(/[^\d]+/).filter(function (n) {
    return n;
  }).map(formatTelLabelBlock).join('. ');
};
/**
 * Derive the contact pattern value
 * @param {string} pattern (optional) - Link text format pattern, using "#" as
 *  the digit placeholder
 * @param {string} parsedNumber (optional) - Telephone number with non-digit characters
 * stripped out
 */


var deriveContactPattern = function deriveContactPattern(pattern, parsedNumber) {
  // Use their pattern if provided.
  if (pattern) {
    return pattern;
  } // If the number is 3 digits, use that pattern as the default.


  if (parsedNumber && parsedNumber.length === PATTERNS['3_DIGIT'].length) {
    return PATTERNS['3_DIGIT'];
  } // Use the default pattern.


  return PATTERNS.DEFAULT;
};
/**
 * Telephone component
 * @param {string|number} contact (required) - telephone number, with or without
 *  formatting; all non-digit characters will be stripped out
 * @param {string} extension (optional) - telephone extension
 * @param {string} className (optional) - additional space-separated class names
 *  to add to the link
 * @param {string} pattern (optional) - Link text format pattern, using "#" as
 *  the digit placeholder
 * @param {string} ariaLabel (optional) - if included, this custom aria-label
 *  will replace the generated aria-label
 * @param {function} onClick (optional) - function called when the link is
 *  clicked
 * @param {string|JSX} children (optional) - if included, this custom
 *  telephone link text will replace the generated text; the pattern passed in
 *  will be ignored
 */


function Telephone(_ref) {
  var _ref$contact = _ref.contact,
      contact = _ref$contact === void 0 ? '' : _ref$contact,
      _ref$extension = _ref.extension,
      extension = _ref$extension === void 0 ? '' : _ref$extension,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$pattern = _ref.pattern,
      pattern = _ref$pattern === void 0 ? '' : _ref$pattern,
      _ref$ariaLabel = _ref.ariaLabel,
      ariaLabel = _ref$ariaLabel === void 0 ? '' : _ref$ariaLabel,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? function () {} : _ref$onClick,
      children = _ref.children,
      _ref$notClickable = _ref.notClickable,
      notClickable = _ref$notClickable === void 0 ? false : _ref$notClickable;
  // strip out non-digits for use in href: "###-### ####" => "##########"
  var parsedNumber = parseNumber(contact.toString());
  var phoneNumber = _contacts.CONTACTS[parsedNumber] || parsedNumber; // Capture 3 digit patterns here

  var contactPattern = deriveContactPattern(pattern, parsedNumber);
  var formattedNumber = formatTelText(phoneNumber, contactPattern); // Show nothing if no phone number was provided.

  if (!phoneNumber) {
    console.warn('Contact number is missing so the <Telephone /> component did not render.');
    return null;
  }

  var formattedAriaLabel = ariaLabel || LABELS[parsedNumber] || // custom 911 aria-label
  "".concat(formatTelLabel(formattedNumber)).concat(extension ? ". extension ".concat(formatTelLabelBlock(extension), ".") : '.'); // Add a "+1" to the tel for all included patterns

  var isIncludedPattern = Object.values(PATTERNS).includes(contactPattern);
  var href = "tel:".concat(isIncludedPattern ? "+1".concat(phoneNumber) : phoneNumber).concat( // extension format ";ext=" from RFC3966 https://tools.ietf.org/html/rfc3966#page-5
  // but it seems that using a comma to pause for 2 seconds might be a better
  // solution - see https://dsva.slack.com/archives/C8E985R32/p1589814301103200
  extension ? ",".concat(extension) : '');

  if (notClickable) {
    return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("span", {
      className: "no-wrap ".concat(className),
      "aria-hidden": "true"
    }, children || "".concat(formattedNumber).concat(extension ? ", ext. ".concat(extension) : '')), _react["default"].createElement("span", {
      className: "vads-u-visibility--screen-reader"
    }, formattedAriaLabel));
  }

  return _react["default"].createElement("a", {
    className: "no-wrap ".concat(className),
    href: href,
    "aria-label": formattedAriaLabel,
    onClick: onClick
  }, children || "".concat(formattedNumber).concat(extension ? ", ext. ".concat(extension) : ''));
}

var _default = Telephone;
exports["default"] = _default;