"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _reactScroll = _interopRequireDefault(require("react-scroll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Element = _reactScroll["default"].Element;
var scroller = _reactScroll["default"].scroller;

var CollapsiblePanel = /*#__PURE__*/function (_React$Component) {
  _inherits(CollapsiblePanel, _React$Component);

  function CollapsiblePanel(props) {
    var _this;

    _classCallCheck(this, CollapsiblePanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollapsiblePanel).call(this, props));
    _this.state = {
      open: !!props.startOpen
    };
    _this.toggleChapter = _this.toggleChapter.bind(_assertThisInitialized(_this));
    _this.scrollToTop = _this.scrollToTop.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CollapsiblePanel, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.id = (0, _uniqueId2["default"])();
    }
  }, {
    key: "scrollToTop",
    value: function scrollToTop() {
      var _window$VetsGov;

      scroller.scrollTo("collapsible-panel-".concat(this.id, "-scroll-element"), ((_window$VetsGov = window.VetsGov) === null || _window$VetsGov === void 0 ? void 0 : _window$VetsGov.scroll) || {
        duration: 500,
        delay: 2,
        smooth: true
      });
    }
  }, {
    key: "toggleChapter",
    value: function toggleChapter(e) {
      var _this2 = this;

      // USWDS styles make it difficult to add a type=button attribute to the toggle button.
      // Until this changes, we need to ensure that accordions used in forms don't
      // default to submitting a form page when toggled.
      e.preventDefault();
      var isOpening = !this.state.open;
      this.setState(function (prevState) {
        return {
          open: !prevState.open
        };
      }, function () {
        if (isOpening) {
          _this2.scrollToTop();
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var pageContent = null;

      if (this.state.open) {
        pageContent = _react["default"].createElement("div", {
          className: "usa-accordion-content",
          "aria-hidden": "false"
        }, this.props.children);
      }

      return _react["default"].createElement("div", {
        className: "".concat(this.props.borderless ? 'usa-accordion' : 'usa-accordion-bordered', " form-review-panel")
      }, _react["default"].createElement(Element, {
        name: "collapsible-panel-".concat(this.id, "-scroll-element")
      }), _react["default"].createElement("div", {
        className: "accordion-header clearfix"
      }, _react["default"].createElement("button", {
        className: "usa-accordion-button usa-button-unstyled",
        "aria-expanded": this.state.open ? 'true' : 'false',
        "aria-controls": "collapsible-".concat(this.id),
        onClick: this.toggleChapter
      }, this.props.panelName)), _react["default"].createElement("div", {
        id: "collapsible-".concat(this.id)
      }, pageContent));
    }
  }]);

  return CollapsiblePanel;
}(_react["default"].Component);

var _default = CollapsiblePanel;
exports["default"] = _default;