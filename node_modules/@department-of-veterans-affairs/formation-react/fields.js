"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeField = makeField;
exports.dirtyAllFields = dirtyAllFields;

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _mapValues2 = _interopRequireDefault(require("lodash/mapValues"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Represents an input field value.
 *
 * Input fields need to have a `dirty` state that represents whether or not a user has touched it.
 * Without this state, it is extremely hard (impossible?) to write UI with required fields where
 * the initial empty state does not get marked as a distracting error.
 */
function makeField(value, optionalDirty) {
  var dirty = optionalDirty === undefined ? false : optionalDirty;
  return {
    value: value,
    dirty: dirty
  };
}
/**
 * Walks through an object hierarchy of fields and marks everything dirty.
 */


function dirtyAllFields(field) {
  if ((0, _keys2["default"])(field).length === 2 && (0, _has2["default"])(field, 'value') && (0, _has2["default"])(field, 'dirty')) {
    return makeField(field.value, true);
  } else if ((0, _isPlainObject2["default"])(field)) {
    return (0, _mapValues2["default"])(field, function (value, _k) {
      return dirtyAllFields(value);
    });
  } else if ((0, _isArray2["default"])(field)) {
    return field.map(dirtyAllFields);
  }

  return field;
}